# plot.py

# Script to visualize the quality of the algorithms.

# Loads results from a .pkl file (generated by main.py), computes the average approximation ratio (ALG / OPT)
# for different values of n (number of items), and plots the ratio (and other metrics) with error bars.
# The plot helps evaluate how the performance of the algorithms scales with problem size.

# Plots are currently generated without titles (titles were added manually in LaTeX later). If you want titles,
# uncomment the relevant lines.

import math
import numpy as np
import os
import matplotlib
import matplotlib.pyplot as plt

# Global matplotlib settings for consistent styling
matplotlib.rcParams.update({
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Computer Modern"],
    "axes.labelsize": 16,
    "figure.titlesize": 16,
    "font.size": 14,
    "legend.fontsize": 12,
    "xtick.labelsize": 12,
    "ytick.labelsize": 12,
    "grid.linestyle": ":",
    "grid.linewidth": 0.5,
    "grid.alpha": 0.4,
    "axes.grid": True,
    "figure.figsize": (10, 6)
})

COL = {
    "primal": "tab:blue",
    "primal_dual": "tab:green",
    "apriori": "tab:red",
    "aposteriori_tau": "tab:orange",
    "aposteriori_lplb": "tab:purple",
}


def _finite(arr):
    a = np.asarray(arr, dtype=float)
    return a[np.isfinite(a)]


def safe_mean(values):
    vals = _finite(values)
    if vals.size == 0:
        return math.nan
    return float(np.mean(vals))


def safe_ci95(values):
    vals = _finite(values)
    sample_size = vals.size
    if sample_size < 2:
        return 0.0
    return 1.98 * float(np.std(vals, ddof=1)) / math.sqrt(sample_size)


def plot_approx_ratio_only(all_results, num_runs, var_param, fixed_n=None, fixed_k=None, c_range=None,
                           output_dir="results", criterion=None):
    if criterion is None:
        if all_results and "criterion" in all_results[0]:
            criterion = all_results[0]["criterion"]
        elif all_results and "algorithm" in all_results[0]:
            criterion = "minmax" if "minmax" in all_results[0]["algorithm"] else "maxmin"
        else:
            raise ValueError("Criterion not specified and cannot be inferred from results.")
    param_suffix = f"_{var_param}" if var_param in {"n", "k", "p"} else ""
    alg_key = all_results[0].get("algorithm", "") if all_results else ""
    is_primal_dual = "primal_dual" in alg_key
    method_label = "Primal–Dual Rounding" if "primal_dual" in alg_key else "Primal Rounding"
    output_plot = f"{output_dir}/plot_approx_ratio_only_{criterion}{param_suffix}.png"
    color_line = COL["primal_dual"] if is_primal_dual else COL["primal"]

    # Organize data by varying parameter (n, k, p)
    param_to_ratios = {}
    for entry in all_results:
        param = entry["varying_param"]
        ratio = entry["ratio_alg_opt"]
        param_to_ratios.setdefault(param, []).append(ratio)

    # Prepare data for plotting
    param_values = sorted(param_to_ratios.keys())
    avg_ratios = [safe_mean(param_to_ratios[param]) for param in param_values]
    ci_ratios_95 = [safe_ci95(param_to_ratios[param]) for param in param_values]
    fig = plt.figure()
    # Plot
    plt.errorbar(param_values, avg_ratios, yerr=ci_ratios_95, fmt='-o', capsize=5,
                 label=rf"{method_label} (Ø $\pm$ 95\% CI)", color=color_line)
    xlabel_map = {
        "n": r"Number of items $n$",
        "k": r"Number of scenarios $k$",
        "p": r"Number of items to select $p$"
    }
    plt.xlabel(xlabel_map.get(var_param, ""))
    plt.ylabel(r"Approximation ratio $\mathrm{ALG} / \mathrm{OPT}_{\mathrm{IP}}$")
    # titles = {"minmax": "min-max", "maxmin": "max-min"}
    # main_title = f"Primal Rounding Approximation Ratio {titles[criterion]} criterion"
    p_label = all_results[0]["p_label"] if all_results and "p_label" in all_results[0] else ""
    subtitle = (
            r"(Average over " + str(num_runs) + r" runs $\mid$ "
            + (r"$n$=" + str(fixed_n) + ", " if var_param != "n" and fixed_n is not None else "")
            + (r"$p$=" + p_label + ", " if var_param != "p" and p_label else "")
            + (r"$k$=" + str(fixed_k) + ", " if var_param != "k" and fixed_k is not None else "")
            + r"cost range: [1, " + str(c_range) + "])"
    )
    # plt.title(f"{main_title}\n{subtitle}")
    plt.title(subtitle)
    plt.xticks(param_values)
    plt.legend()
    plt.tight_layout()
    plt.savefig(output_plot, bbox_inches='tight')
    plt.close(fig)
    print(f"✅ Plot saved to {output_plot}")


def plot_approximation_ratios_primal(all_results, num_runs, var_param, fixed_n=None, fixed_k=None, c_range=None,
                                     output_dir="results"):
    criterion = "minmax"
    param_suffix = f"_{var_param}" if var_param in {"n", "k", "p"} else ""
    output_plot = f"{output_dir}/plot_ratio_{criterion}{param_suffix}.png"

    # Organize data by n
    param_to_ratios = {}
    param_to_bounds = {}
    param_to_guarantee = {}
    param_to_alg_div_optlp = {}
    for entry in all_results:
        param = entry["varying_param"]
        ratio = entry["ratio_alg_opt"]
        bound = entry["a_posteriori_bound"]
        guarantee = entry["approximation_guarantee"]
        alg_div_opt_lp = entry["alg_div_opt_lp"]
        param_to_ratios.setdefault(param, []).append(ratio)
        param_to_bounds.setdefault(param, []).append(bound)
        param_to_guarantee.setdefault(param, []).append(guarantee)
        param_to_alg_div_optlp.setdefault(param, []).append(alg_div_opt_lp)

    # Prepare data for plotting
    param_values = sorted(param_to_ratios.keys())
    avg_guarantees = [np.mean(param_to_guarantee[p]) for p in param_values]
    avg_ratios = [safe_mean(param_to_ratios[p]) for p in param_values]
    ci_ratios_95 = [safe_ci95(param_to_ratios[p]) for p in param_values]
    avg_bounds = [safe_mean(param_to_bounds[p]) for p in param_values]
    ci_bounds_95 = [safe_ci95(param_to_bounds[p]) for p in param_values]
    avg_alg_div_optlp = [safe_mean(param_to_alg_div_optlp[p]) for p in param_values]
    ci_alg_div_optlp_95 = [safe_ci95(param_to_alg_div_optlp[p]) for p in param_values]

    # Plot
    plt.figure()
    plt.errorbar(param_values, avg_ratios, yerr=ci_ratios_95, fmt='-o', capsize=5,
                 label=r"Primal Rounding (Ø $\pm$ 95\% CI)", color=COL["primal"])
    plt.errorbar(param_values, avg_bounds, yerr=ci_bounds_95, fmt='--s', capsize=5,
                 label=r"A-posteriori bound $1/\tau$ (Ø $\pm$ 95\% CI)", color=COL["aposteriori_tau"])
    plt.errorbar(param_values, avg_alg_div_optlp, yerr=ci_alg_div_optlp_95, fmt='-.d', capsize=5,
                 label=r"A-posteriori bound $\mathrm{ALG} / \mathrm{OPT}_{\mathrm{LP}}$ (Ø $\pm$ 95\% CI)",
                 color=COL["aposteriori_lplb"])
    plt.plot(param_values, avg_guarantees, ':^', label=r"Approximation guarantee $\min(k, n - p + 1)$",
             color=COL["apriori"])
    xlabel_map = {
        "n": r"Number of items $n$",
        "k": r"Number of scenarios $k$",
        "p": r"Number of items to select $p$"
    }
    plt.xlabel(xlabel_map.get(var_param, ""))
    plt.ylabel(r"Relative performance ratio")
    plt.yscale('log')
    # titles = {"minmax": "min-max"}
    # main_title = f"Approximation Ratio vs. Approximation Guarantees for {titles[criterion]} criterion"
    p_label = all_results[0].get("p_label", "") if all_results else ""
    subtitle = (
            r"(Average over " + str(num_runs) + r" runs $\mid$ "
            + (r"$n$=" + str(fixed_n) + ", " if var_param != "n" and fixed_n is not None else "")
            + (r"$p$=" + p_label + ", " if var_param != "p" and p_label else "")
            + (r"$k$=" + str(fixed_k) + ", " if var_param != "k" and fixed_k is not None else "")
            + r"cost range: [1, " + str(c_range) + "])"
    )
    # plt.title(f"{main_title}\n{subtitle}")
    plt.title(subtitle)
    plt.xticks(param_values)
    plt.legend(loc='upper right', bbox_to_anchor=(1.0, 0.85))
    plt.tight_layout()
    plt.savefig(output_plot, bbox_inches='tight')
    plt.close()
    print(f"✅ Plot saved to {output_plot}")


def plot_approximation_ratios_primaldual(all_results, num_runs, var_param, fixed_n=None, fixed_k=None,
                                         c_range=None, output_dir="results"):
    criterion = "minmax"
    param_suffix = f"_{var_param}" if var_param in {"n", "k", "p"} else ""
    output_plot = f"{output_dir}/plot_ratio_primaldual_{criterion}{param_suffix}.png"

    # Organize data by param (e.g., n, k, or p)
    param_to_ratios = {}
    param_to_guarantee = {}
    param_to_a_post = {}
    param_to_alg_div_opt_lp = {}

    for entry in all_results:
        param = entry["varying_param"]
        ratio = entry["ratio_alg_opt"]  # or "ratio_primaldual_opt" if that's what you use in results
        guarantee = entry["approximation_guarantee"]
        a_post = entry["a_posteriori_bound"]
        alg_div_opt_lp = entry["alg_div_opt_lp"]
        param_to_ratios.setdefault(param, []).append(ratio)
        param_to_guarantee.setdefault(param, []).append(guarantee)
        param_to_a_post.setdefault(param, []).append(a_post)
        param_to_alg_div_opt_lp.setdefault(param, []).append(alg_div_opt_lp)

    # Prepare data for plotting
    param_values = sorted(param_to_ratios.keys())
    avg_guarantees = [np.mean(param_to_guarantee[p]) for p in param_values]
    avg_ratios = [safe_mean(param_to_ratios[p]) for p in param_values]
    ci_ratios_95 = [safe_ci95(param_to_ratios[p]) for p in param_values]
    avg_a_post = [safe_mean(param_to_a_post[p]) for p in param_values]
    ci_bounds_95 = [safe_ci95(param_to_a_post[p]) for p in param_values]
    avg_alg_div_opt_lp = [safe_mean(param_to_alg_div_opt_lp[p]) for p in param_values]
    ci_alg_div_optlp_95 = [safe_ci95(param_to_alg_div_opt_lp[p]) for p in param_values]

    # Plot
    plt.figure()
    plt.errorbar(param_values, avg_ratios, yerr=ci_ratios_95, fmt='-o', capsize=5,
                 label=r"Primal-Dual Rounding (Ø $\pm$ 95\% CI)", color=COL["primal_dual"])
    plt.plot(param_values, avg_guarantees, ':^',
             label=r"Theoretical guarantee $k$", color=COL["apriori"])
    plt.errorbar(param_values, avg_a_post, yerr=ci_bounds_95, fmt='--s', capsize=5,
                 label=r"A–posteriori bound $\mathrm{ALG} / \mathrm{LB}_{\mathrm{dual}}$ (Ø $\pm$ 95\% CI)",
                 color=COL["aposteriori_tau"])
    plt.errorbar(param_values, avg_alg_div_opt_lp, yerr=ci_alg_div_optlp_95, fmt='--s', capsize=5,
                 label=r"A–posteriori bound $\mathrm{ALG} / \mathrm{OPT}_{\mathrm{LP}}$ (Ø $\pm$ 95\% CI)",
                 color=COL["aposteriori_lplb"])

    xlabel_map = {
        "n": r"Number of items $n$",
        "k": r"Number of scenarios $k$",
        "p": r"Number of items to select $p$"
    }
    plt.xlabel(xlabel_map.get(var_param, ""))
    plt.ylabel(r"Approximation ratio $\mathrm{ALG} / \mathrm{OPT}_{\mathrm{IP}}$")
    plt.yscale('log')
    # titles = {"minmax": "min-max"}
    # main_title = f"Approximation Ratio vs. Approximation Guarantees for {titles[criterion]} criterion"
    p_label = all_results[0].get("p_label", "") if all_results else ""
    subtitle = (
            r"(Average over " + str(num_runs) + r" runs $\mid$ "
            + (r"$n$=" + str(fixed_n) + ", " if var_param != "n" and fixed_n is not None else "")
            + (r"$p$=" + p_label + ", " if var_param != "p" and p_label else "")
            + (r"$k$=" + str(fixed_k) + ", " if var_param != "k" and fixed_k is not None else "")
            + r"cost range: [1, " + str(c_range) + "])"
    )
    # plt.title(f"{main_title}\n{subtitle}")
    plt.title(subtitle)
    plt.xticks(param_values)
    plt.legend(loc='upper right', bbox_to_anchor=(1.0, 0.85))
    plt.tight_layout()
    plt.savefig(output_plot, bbox_inches='tight')
    plt.close()
    print(f"✅ Plot saved to {output_plot}")


def plot_fractional_variable_count(all_results, num_runs, var_param, fixed_n=None, fixed_k=None,
                                   c_range=None, output_dir="results"):
    criterion = "minmax"
    param_suffix = f"_{var_param}" if var_param in {"n", "k", "p"} else ""
    output_plot = os.path.join(output_dir, f"plot_fractional_count_{criterion}{param_suffix}.png")

    # Mapping for x-axis label
    xlabel_map = {
        "n": r"Number of items $n$",
        "k": r"Number of scenarios $k$",
        "p": r"Number of items to select $p$"
    }

    # Prepare data
    x_vals = []
    frac_counts = []
    for entry in all_results:
        x_vals.append(entry["varying_param"])
        frac_counts.append(entry["fractional_count"])

    x_array = np.array(x_vals)
    frac_array = np.array(frac_counts)
    jitter_strength = 0.3
    x_jittered = x_array + np.random.uniform(-jitter_strength, jitter_strength, size=len(x_array))

    # Plot
    plt.figure()
    plt.scatter(x_jittered, frac_array, alpha=0.5, label="Fractional variables (per run)")

    # Optional horizontal line if k is fixed
    if fixed_k is not None:
        plt.axhline(y=fixed_k, color='red', linestyle='--', label=f"Theoretical upper bound ($k = {fixed_k}$)")

    plt.xlabel(xlabel_map.get(var_param, var_param))
    plt.ylabel("Number of fractional variables")
    # titles = {"minmax": "min-max", "maxmin": "max-min"}
    # main_title = f"Scatter: Fractional Variables for {titles[criterion]} criterion"
    p_label = all_results[0].get("p_label", "") if all_results else ""
    subtitle = (
            r"(Each point = one run, "
            + (r"$n$=" + str(fixed_n) + ", " if var_param != "n" and fixed_n is not None else "")
            + (r"$p$=" + p_label + ", " if var_param != "p" else "")
            + (r"$k$=" + str(fixed_k) if var_param != "k" and fixed_k is not None else "")
            + (", cost range: [1, " + str(c_range) + "]" if c_range is not None else "")
            + f", {num_runs} runs per ${var_param}$)"
    )
    # plt.title(f"{main_title}\n{subtitle}")
    plt.title(subtitle)
    plt.xticks(sorted(set(x_vals)))
    plt.legend()
    plt.tight_layout()
    plt.savefig(output_plot, bbox_inches='tight')
    plt.close()
    print(f"✅ Fractional variable plot saved to {output_plot}")


def plot_ratio_comp(results_primal, results_primaldual, num_runs, var_param, fixed_n=None, fixed_k=None, c_range=None,
                    output_dir="results", criterion="minmax"):
    param_suffix = f"_{var_param}" if var_param in {"n", "k", "p"} else ""
    output_plot = f"{output_dir}/plot_ratio_comparison_{criterion}{param_suffix}.png"

    def collect_ratio_by_param(all_results):
        d = {}
        for e in all_results:
            p = e["varying_param"]
            r = e["ratio_alg_opt"]
            d.setdefault(p, []).append(r)
        return d

    d_pri = collect_ratio_by_param(results_primal)
    d_pd = collect_ratio_by_param(results_primaldual)

    # Same x-axis
    common_params = sorted(set(d_pri.keys()) & set(d_pd.keys()))
    if not common_params:
        common_params = sorted(set(d_pri.keys()) | set(d_pd.keys()))

    # Aggregation
    avg_pri = [safe_mean(d_pri.get(p, [])) for p in common_params]
    err_pri = [safe_ci95(d_pri.get(p, [])) for p in common_params]

    avg_pd = [safe_mean(d_pd.get(p, [])) for p in common_params]
    err_pd = [safe_ci95(d_pd.get(p, [])) for p in common_params]

    # Plot
    plt.figure()

    # Primal Rounding
    plt.errorbar(common_params, avg_pri, yerr=err_pri, fmt='-o', capsize=5,
                 label=r"Primal Rounding (Ø $\pm$ 95\% CI)", color=COL["primal"])

    # Primal–Dual Rounding
    plt.errorbar(common_params, avg_pd, yerr=err_pd, fmt='-s', capsize=5,
                 label=r"Primal–Dual Rounding (Ø $\pm$ 95\% CI)", color=COL["primal_dual"])

    xlabel_map = {
        "n": r"Number of items $n$",
        "k": r"Number of scenarios $k$",
        "p": r"Number of items to select $p$"
    }
    plt.xlabel(xlabel_map.get(var_param, ""))
    plt.ylabel(r"Approximation ratio $\mathrm{ALG} / \mathrm{OPT}_{\mathrm{IP}}$")
    # titles = {"minmax": "min-max"}
    # main_title = f"Approximation Ratio Primal vs. Primal–Dual Rounding under the {titles[criterion]} criterion"
    p_label = results_primal[0].get("p_label", "") if results_primal else ""
    subtitle = (
            r"(Average over " + str(num_runs) + r" runs $\mid$ "
            + (r"$n$=" + str(fixed_n) + ", " if var_param != "n" and fixed_n is not None else "")
            + (r"$p$=" + p_label + ", " if var_param != "p" and p_label != "" else "")
            + (r"$k$=" + str(fixed_k) + ", " if var_param != "k" and fixed_k is not None else "")
            + r"cost range: [1, " + str(c_range) + "])"
    )
    # plt.title(f"{main_title}\n{subtitle}")
    plt.title(subtitle)
    plt.xticks(common_params)
    plt.legend(loc='best')
    plt.tight_layout()
    plt.savefig(output_plot, bbox_inches='tight')
    plt.close()
    print(f"✅ Plot saved to {output_plot}")
