# plot_results.py

# Script to visualize the approximation quality of the  algorithms.

# Loads results from a .pkl file (generated by main.py), computes the average approximation ratio (ALG / OPT)
# for different values of n (number of items), and plots the ratio with error bars (standard deviation).
# The plot helps evaluate how the performance of the approximation algorithms scales with problem size.

# Prerequisite: Run main.py first to generate 'all_results.pkl'.

# TODO: Aktuell wird Plot 2x ge√∂ffnet (evtl. Bug in matplotlib?)

import pickle
import matplotlib
matplotlib.use('TkAgg')  # Use TkAgg backend for matplotlib
import matplotlib.pyplot as plt
import numpy as np

def plot_approximation_ratios(pkl_file="results/all_results_maxmin.pkl"):
    # Load results
    with open(pkl_file, "rb") as f:
        all_results = pickle.load(f)

    # Organize data by n
    n_to_ratios = {}
    for entry in all_results:
        n = entry["n"]
        ratio = entry["ratio_primal_opt"]
        if n not in n_to_ratios:
            n_to_ratios[n] = []
        n_to_ratios[n].append(ratio)

    # Prepare data for plotting
    n_values = sorted(n_to_ratios.keys())
    avg_ratios = [np.mean(n_to_ratios[n]) for n in n_values]
    #std_devs = [np.std(n_to_ratios[n]) for n in n_values]
    ci_95 = [1.96 * np.std(n_to_ratios[n]) / np.sqrt(len(n_to_ratios[n])) for n in n_values]

    # Plot
    plt.figure(figsize=(10, 6))
    #plt.errorbar(n_values, avg_ratios, yerr=std_devs, fmt='-o', capsize=5)
    plt.errorbar(n_values, avg_ratios, yerr=ci_95, fmt='-o', capsize=5)
    plt.xlabel("Number of items (n)")
    plt.ylabel("Approximation ratio (ALG / OPT)")
    plt.title("Approximation Ratio (Max-Min): Primal Rounding vs. Optimal Solution")
    plt.grid(True)
    plt.tight_layout()
    plt.savefig("results/plot_ratio_maxmin.png")
    # plt.show()  # if activated: close plot window to continue execution of run_all.py

if __name__ == "__main__":
    plot_approximation_ratios()
